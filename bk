import java.util.*;

public class CurrencyConverter{
    private Map<String, Map<String, Double>> conversionRates;

    public CurrencyConverter() {
        conversionRates = new HashMap<>();
    }

    public void addConversionRate(String fromCurrency, String toCurrency, double rate) {
        conversionRates.computeIfAbsent(fromCurrency, k -> new HashMap<>()).put(toCurrency, rate);
    }

    public double convertCurrency(double amount, String fromCurrency, String toCurrency, double serviceFee) {
        if (!conversionRates.containsKey(fromCurrency) || !conversionRates.containsKey(toCurrency))
            return -1; // Conversion not possible

        List<String> path = findConversionPath(fromCurrency, toCurrency);
        if (path.isEmpty())
            return -1; // Conversion not possible

        double totalRate = 1.0;
        for (int i = 0; i < path.size() - 1; i++) {
            String currentCurrency = path.get(i);
            String nextCurrency = path.get(i + 1);
            double rate = conversionRates.get(currentCurrency).get(nextCurrency);
            totalRate *= rate;
        }

        double convertedAmount = amount * totalRate;
        double serviceFeeAmount = serviceFee * (path.size() - 1);
        return convertedAmount + serviceFeeAmount;
    }

    private List<String> findConversionPath(String fromCurrency, String toCurrency) {
        Set<String> visited = new HashSet<>();
        Queue<List<String>> queue = new LinkedList<>();
        queue.add(Collections.singletonList(fromCurrency));

        while (!queue.isEmpty()) {
            List<String> path = queue.poll();
            String currentCurrency = path.get(path.size() - 1);

            if (currentCurrency.equals(toCurrency)) {
                return path;
            }

            visited.add(currentCurrency);
            Map<String, Double> neighbors = conversionRates.get(currentCurrency);
            if (neighbors != null) {
                for (String neighbor : neighbors.keySet()) {
                    if (!visited.contains(neighbor)) {
                        List<String> newPath = new ArrayList<>(path);
                        newPath.add(neighbor);
                        queue.add(newPath);
                    }
                }
            }
        }

        return Collections.emptyList();
    }

    public static void main(String[] args) {
        CurrencyConverter converter = new CurrencyConverter();
        converter.addConversionRate("EUR", "GBP", 1.18);
        converter.addConversionRate("GBP", "USD", 1.35);
        converter.addConversionRate("USD", "CNY", 6.66);
        converter.addConversionRate("CNY", "RUB", 4.44);
        converter.addConversionRate("CNY", "USD", 0.77);
        converter.addConversionRate("USD", "EUR", 1.12);
        converter.addConversionRate("EUR", "BRI", 5.18);
        converter.addConversionRate("BRI", "YEN", 4.99);
        converter.addConversionRate("YEN", "KRW", 0.11);
        //converter.addConversionRate("RUB", "CNY", 1.34);
        converter.addConversionRate("RUB", "KPW", 3.33);
        converter.addConversionRate("RUB", "THB", 6.66);

        double amount = 1000;
        String fromCurrency = "EUR";
        String toCurrency = "USD";
        double serviceFee = 0.75;

        // Test case 1: Convert 1000 EUR to USD
        double amount1 = 1000;
        String fromCurrency1 = "EUR";
        String toCurrency1 = "USD";
        double serviceFee1 = 0.75;
        double convertedAmount1 = converter.convertCurrency(amount1, fromCurrency1, toCurrency1, serviceFee1);
        if (convertedAmount1 == -1) {
            System.out.println("Test case 1: Conversion not possible");
        } else {
            System.out.println("Test case 1: Converted amount: " + convertedAmount1);
        }

        // Test case 2: Convert 1000 EUR to CNY
        double amount2 = 1000;
        String fromCurrency2 = "EUR";
        String toCurrency2 = "CNY";
        double serviceFee2 = 0.75;
        double convertedAmount2 = converter.convertCurrency(amount2, fromCurrency2, toCurrency2, serviceFee2);
        if (convertedAmount2 == -1) {
            System.out.println("Test case 2: Conversion not possible");
        } else {
            System.out.println("Test case 2: Converted amount: " + convertedAmount2);
        }

        // Test case 3: Convert 1000 EUR to RUB
        double amount3 = 1000;
        String fromCurrency3 = "EUR";
        String toCurrency3 = "RUB";
        double serviceFee3 = 0.75;
        double convertedAmount3 = converter.convertCurrency(amount3, fromCurrency3, toCurrency3, serviceFee3);
        if (convertedAmount3 == -1) {
            System.out.println("Test case 3: Conversion not possible");
        } else {
            System.out.println("Test case 3: Converted amount: " + convertedAmount3);
        }

        // Test case 4: Convert 1000 RUB to USD
        double amount4 = 1000;
        String fromCurrency4 = "RUB";
        String toCurrency4 = "USD";
        double serviceFee4 = 0.75;
        double convertedAmount4 = converter.convertCurrency(amount4, fromCurrency4, toCurrency4, serviceFee4);
        if (convertedAmount4 == -1) {
            System.out.println("Test case 4: Conversion not possible");
        } else {
            System.out.println("Test case 4: Converted amount: " + convertedAmount4);
        }

        // Test case 5: Convert 1000 CNY to USD
        double amount5 = 1000;
        String fromCurrency5 = "CNY";
        String toCurrency5 = "USD";
        double serviceFee5 = 0.75;
        double convertedAmount5 = converter.convertCurrency(amount5, fromCurrency5, toCurrency5, serviceFee5);
        if (convertedAmount5 == -1) {
            System.out.println("Test case 5: Conversion not possible");
        } else {
            System.out.println("Test case 5: Converted amount: " + convertedAmount5);
        }

        // Test case 6: Convert 1000 USD to USD
        double amount6 = 1000;
        String fromCurrency6 = "USD";
        String toCurrency6 = "USD";
        double serviceFee6 = 0.75;
        double convertedAmount6 = converter.convertCurrency(amount6, fromCurrency6, toCurrency6, serviceFee6);
        if (convertedAmount6 == -1) {
            System.out.println("Test case 6: Conversion not possible");
        } else {
            System.out.println("Test case 6: Converted amount: " + convertedAmount6);
        }
    }
}


下面是一个Java语言实现的面向对象设计算法，用于解决这个问题：

java
Copy code
import java.util.*;

class CurrencyConverter {
    private Map<String, Map<String, Double>> conversionRates;

    public CurrencyConverter() {
        conversionRates = new HashMap<>();
    }

    public void addConversionRate(String fromCurrency, String toCurrency, double rate) {
        conversionRates.computeIfAbsent(fromCurrency, k -> new HashMap<>()).put(toCurrency, rate);
    }

    public double convertCurrency(double amount, String fromCurrency, String toCurrency, double serviceFee) {
        if (!conversionRates.containsKey(fromCurrency) || !conversionRates.containsKey(toCurrency))
            return -1; // Conversion not possible

        List<String> path = findConversionPath(fromCurrency, toCurrency);
        if (path.isEmpty())
            return -1; // Conversion not possible

        double totalRate = 1.0;
        for (int i = 0; i < path.size() - 1; i++) {
            String currentCurrency = path.get(i);
            String nextCurrency = path.get(i + 1);
            double rate = conversionRates.get(currentCurrency).get(nextCurrency);
            totalRate *= rate;
        }

        double convertedAmount = amount * totalRate;
        double serviceFeeAmount = serviceFee * (path.size() - 1);
        return convertedAmount + serviceFeeAmount;
    }

    private List<String> findConversionPath(String fromCurrency, String toCurrency) {
        Set<String> visited = new HashSet<>();
        Queue<List<String>> queue = new LinkedList<>();
        queue.add(Collections.singletonList(fromCurrency));

        while (!queue.isEmpty()) {
            List<String> path = queue.poll();
            String currentCurrency = path.get(path.size() - 1);

            if (currentCurrency.equals(toCurrency)) {
                return path;
            }

            visited.add(currentCurrency);
            Map<String, Double> neighbors = conversionRates.get(currentCurrency);
            if (neighbors != null) {
                for (String neighbor : neighbors.keySet()) {
                    if (!visited.contains(neighbor)) {
                        List<String> newPath = new ArrayList<>(path);
                        newPath.add(neighbor);
                        queue.add(newPath);
                    }
                }
            }
        }

        return Collections.emptyList();
    }
}

public class Main {
    public static void main(String[] args) {
        CurrencyConverter converter = new CurrencyConverter();
        converter.addConversionRate("EUR", "GBP", 1.18);
        converter.addConversionRate("GBP", "USD", 1.35);
        converter.addConversionRate("USD", "CNY", 6.66);
        converter.addConversionRate("CNY", "RUB", 4.44);
        converter.addConversionRate("CNY", "USD", 0.77);
        converter.addConversionRate("USD", "EUR", 1.12);
        converter.addConversionRate("EUR", "BRI", 5.18);
        converter.addConversionRate("BRI", "YEN", 4.99);
        converter.addConversionRate("YEN", "KRW", 0.11);

        double amount = 1000;
        String fromCurrency = "EUR";
        String toCurrency = "USD";
        double serviceFee = 0.75;

        double convertedAmount = converter.convertCurrency(amount, fromCurrency, toCurrency, serviceFee);
        if (convertedAmount == -1) {
            System.out.println("Conversion not possible");
        } else {
            System.out.println("Converted amount: " + convertedAmount);
        }
    }
}

//Code Overview:

The CurrencyConverter class provides functionality to convert currencies and calculate the total amount including a service fee. Here's a breakdown of the code with detailed comments:

The class CurrencyConverter is declared with a private member conversionRates, which is a map that stores the conversion rates between currencies.

The constructor initializes the conversionRates map as an empty HashMap.

The addConversionRate method allows adding conversion rates to the conversionRates map. It uses the computeIfAbsent method to ensure that the maps for fromCurrency and toCurrency exist before adding the rate.

The convertCurrency method takes the amount, fromCurrency, toCurrency, and serviceFee as input. It checks if conversion rates for the specified currencies exist in the conversionRates map. If not, itreturns -1, indicating that the conversion is not possible.

The findConversionPath method is a helper method used to find a conversion path from the fromCurrency to the toCurrency. It uses a breadth-first search (BFS) approach to explore the possible paths. It maintains a set of visited currencies to avoid cycles and uses a queue to perform the BFS traversal.

Inside the convertCurrency method, it calls the findConversionPath method to get the conversion path. If the path is empty, it means that no conversion path exists, and -1 is returned.

The method then calculates the total conversion rate by multiplying the conversion rates along the path. It iterates over the path, retrieves the conversion rate between each currency pair, and multiplies them to get the total rate.

The converted amount is calculated by multiplying the amount by the total conversion rate. The service fee amount is calculated by multiplying the serviceFee by the number of currency conversions in the path.

Finally, the method returns the total amount, which is the sum of the converted amount and the service fee amount.

In the main method, an instance of CurrencyConverter is created, and conversion rates between currencies are added using the addConversionRate method.

Test cases are provided to convert various amounts between currencies. The convertCurrency method is called with the respective input parameters, and the result is checked. If the result is -1, it means that the conversion is not possible, and the corresponding message is printed. Otherwise, the converted amount is printed.

This code allows for adding conversion rates between currencies and performing currency conversions, considering the conversion rates and service fees. The BFS-based approach finds the conversion path efficiently, ensuring the conversion is possible and providing the converted amount or indicating that the conversion is not possible.
//The time complexity of this solution depends on the number of conversion rates and the length of the conversion path. In the worst case, when all conversion rates and currencies are interconnected, the time complexity is O(V + E), where V is the number of currencies and E is the number of conversion rates. The BFS algorithm contributes to this complexity.

The space complexity of the solution is O(V + E), where V is the number of currencies and E is the number of conversion rates. The space is mainly used for the conversionRates map and the visited set.

As for potential optimizations, the code could benefit from caching previously found conversion paths to avoid redundant calculations. Additionally, if the conversion rates are static and do not change frequently, precomputing the conversion paths between all pairs of currencies could improve the overall performance.

Overall, this code provides a functional currency converter using a BFS approach to find conversion paths, and it has a moderate time and space complexity.

//这是 CurrencyConverter 类的定义。它包含一个名为 conversionRates 的映射表，用于存储货币之间的转换率。addConversionRate 方法用于添加货币转换率到映射表中。
//convertCurrency 方法用于将给定货币金额从一种货币转换为另一种货币，并计算服务费。首先，它检查映射表中是否存在起始货币和目标货币的转换率。如果不存在，则返回 -1，表示无法进行转换。
//接下来，它调用 findConversionPath 方法来查找从起始货币到目标货币的转换路径。如果找不到路径，则返回 -1，表示无法进行转换。
//如果找到了转换路径，它将遍历路径上的每个货币，并根据转换率计算总的转换率。这是通过从 conversionRates 中获取相邻货币的转换率，并将其乘以 totalRate 来实现的。
//计算转换后的金额 convertedAmount，将原始金额乘以总的转换率。然后，计算服务费 serviceFeeAmount，这是通过将服务费 serviceFee 乘以路径长度减去1来计算的。最后，将转换后的金额和服务费相加，返回最终金额。

//findConversionPath 方法使用广度优先搜索（BFS）来查找从起始货币到目标货币的转换路径。它维护一个访问过的集合 visited，以防止重复访问相同的货币。

首先，它创建一个队列 queue，并将起始货币的单元素列表添加到队列中。然后，进入循环，直到队列为空。

在循环中，它从队列中取出路径，并获取路径中的最后一个货币 currentCurrency。如果 currentCurrency 等于目标货币 toCurrency，则找到了转换路径，返回该路径。

否则，将 currentCurrency 添加到已访问集合 visited 中，并获取其邻居货币。对于每个未访问过的邻居货币，它创建一个新的路径 newPath，并将邻居货币添加到新路径的末尾。然后，将新路径 newPath 添加到队列 queue 中，以便继续扩展路径。

如果在循环结束后仍然没有找到转换路径，则返回一个空列表。





